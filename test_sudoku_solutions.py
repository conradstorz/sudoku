from sudoku import *

boards = []

boards.append(([[5, 3, 4, 6, 7, 8, 9, 1, 2],
               [6, 7, 2, 1, 9, 5, 3, 4, 8],
               [1, 9, 8, 3, 4, 2, 5, 6, 7],
               [8, 5, 9, 7, 6, 1, 4, 2, 3],
               [4, 2, 6, 8, 5, 3, 7, 9, 1],
               [7, 1, 3, 9, 2, 4, 8, 5, 6],
               [9, 6, 1, 5, 3, 7, 2, 8, 4],
               [2, 8, 7, 4, 1, 9, 6, 3, 5],
               [3, 4, 5, 2, 8, 6, 1, 7, 9]],
               True,))

boards.append(([[5, 3, 4, 6, 7, 8, 9, 1, 2],
               [6, 7, 2, 1, 9, 5, 3, 4, 8],
               [1, 9, 8, 3, 4, 2, 5, 6, 7],
               [8, 5, 9, 7, 6, 1, 4, 2, 3],
               [4, 2, 6, 8, 5, 3, 7, 9, 1],
               [7, 1, 3, 9, 2, 4, 8, 5, 6],
               [9, 6, 1, 5, 3, 7, 2, 8, 4],
               [2, 8, 7, 4, 1, 9, 6, 3, 5],
               [3, 4, 5, 2, 8, 6, 1, 7, 0]],
               False,))

boards.append(([[5, 3, 4, 6, 7, 8, 9, 1, 2],
               [6, 7, 2, 1, 9, 5, 3, 4, 8],
               [1, 9, 8, 3, 4, 2, 5, 6, 7],
               [8, 5, 9, 7, 6, 1, 4, 2, 3],
               [4, 2, 6, 8, 5, 3, 7, 9, 1],
               [7, 1, 3, 9, 2, 0, 8, 5, 6],
               [9, 6, 1, 5, 3, 7, 2, 8, 4],
               [2, 8, 7, 4, 1, 9, 6, 3, 5],
               [3, 4, 5, 2, 8, 6, 1, 7, 9]],
               False,))

boards.append(([[5, 3, 4, 6, 7, 8, 9, 1, 2],
               [6, 7, 2, 0, 9, 5, 3, 4, 8],
               [1, 9, 8, 3, 4, 2, 5, 6, 7],
               [8, 5, 9, 7, 6, 1, 4, 2, 3],
               [4, 2, 6, 8, 5, 3, 7, 9, 1],
               [7, 1, 3, 9, 2, 4, 8, 5, 6],
               [9, 6, 1, 5, 3, 7, 2, 8, 4],
               [2, 8, 7, 4, 1, 9, 6, 3, 5],
               [3, 4, 5, 2, 8, 6, 1, 7, 9]],
               False,))

boards.append(([[5, 3, 4, 6, 7, 8, 9, 1, 2],
               [6, 7, 2, 1, 9, 5, 3, 4, 8],
               [1, 9, 8, 3, 4, 2, 5, 6, 7],
               [8, 5, 0, 7, 6, 1, 4, 2, 3],
               [4, 2, 6, 8, 5, 3, 7, 9, 1],
               [7, 1, 3, 9, 2, 4, 8, 5, 6],
               [9, 6, 1, 5, 3, 7, 2, 8, 4],
               [2, 8, 7, 4, 1, 9, 6, 3, 5],
               [3, 4, 5, 2, 8, 6, 1, 7, 9]],
               False,))

boards.append(([[5, 3, 4, 6, 7, 8, 9, 1, 2],
               [6, 7, 2, 1, 9, 5, 3, 4, 8],
               [1, 9, 8, 3, 4, 2, 5, 6, 7],
               [8, 5, 9, 7, 6, 1, 4, 2, 3],
               [4, 2, 6, 8, 5, 3, 7, 9, 1],
               [7, 1, 3, 9, 2, 4, 8, 5, 6],
               [0, 6, 1, 5, 3, 7, 2, 8, 4],
               [2, 8, 7, 4, 1, 9, 6, 3, 5],
               [3, 4, 5, 2, 8, 6, 1, 7, 9]],
               False,))

boards.append(
  ([[5, 3, 2, 6, 7, 8, 9, 2, 2],
    [6, 7, 2, 1, 9, 0, 3, 4, 9],
    [5, 0, 0, 3, 4, 2, 5, 6, 0],
    [8, 5, 9, 7, 6, 1, 0, 2, 0],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 0, 1, 5, 3, 7, 2, 1, 4],
    [1, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 0, 0, 4, 8, 1, 1, 7, 9]],
    False,) #tuple of board and bool
  )

boards.append(
  ( #begin tuple
    [[1, 3, 2, 5, 7, 9, 4, 6, 8]
    ,[4, 9, 8, 2, 6, 1, 3, 7, 5]
    ,[7, 5, 6, 3, 8, 4, 2, 1, 9]
    ,[6, 4, 3, 1, 5, 8, 7, 9, 2]
    ,[5, 2, 1, 7, 9, 3, 8, 4, 6]
    ,[9, 8, 7, 4, 2, 6, 5, 3, 1]
    ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
    ,[3, 6, 5, 8, 1, 7, 9, 2, 4]
    ,[8, 7, 9, 6, 4, 2, 1, 5, 3]]
    , True,) #end tuple of board and bool
  )

boards.append(
  (
    [[1, 3, 2, 5, 7, 9, 4, 6, 8]
    ,[4, 0, 8, 2, 6, 1, 3, 7, 5]
    ,[7, 5, 6, 3, 8, 4, 2, 1, 9]
    ,[6, 4, 3, 1, 5, 8, 7, 9, 2]
    ,[5, 2, 1, 7, 9, 3, 8, 4, 6]
    ,[9, 8, 7, 4, 2, 6, 5, 3, 1]
    ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
    ,[3, 6, 5, 8, 1, 7, 9, 2, 4]
    ,[8, 7, 9, 6, 4, 2, 1, 3, 5]]
    , False,)
  )

boards.append(
  (
    [[1, 3, 2, 5, 7, 9, 4, 6, 8]
    ,[4, 9, 8, 2, 6, 0, 3, 7, 5]
    ,[7, 0, 6, 3, 8, 0, 2, 1, 9]
    ,[6, 4, 3, 1, 5, 0, 7, 9, 2]
    ,[5, 0, 1, 7, 9, 0, 8, 4, 6]
    ,[9, 8, 0, 4, 2, 6, 5, 3, 1]
    ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
    ,[3, 6, 0, 8, 1, 7, 9, 2, 4]
    ,[8, 7, 0, 6, 4, 2, 1, 3, 5]]
    , False,)
  )

boards.append(
  (
    [[1, 2, 3, 4, 5, 6, 7, 8, 9]
    ,[2, 3, 4, 5, 6, 7, 8, 9, 1]
    ,[3, 4, 5, 6, 7, 8, 9, 1, 2]
    ,[4, 5, 6, 7, 8, 9, 1, 2, 3]
    ,[5, 6, 7, 8, 9, 1, 2, 3, 4]
    ,[6, 7, 8, 9, 1, 2, 3, 4, 5]
    ,[7, 8, 9, 1, 2, 3, 4, 5, 6]
    ,[8, 9, 1, 2, 3, 4, 5, 6, 7]
    ,[9, 1, 0, 3, 4, 5, 6, 7, 8]]
    , False,)
  )

boards.append(
  (
    [[1, 3, 2, 5, 7, 9, 4, 6, 8]
    ,[4, 9, 8, 2, 6, 1, 3, 7, 5]
    ,[7, 5, 6, 3, 8, 0, 2, 1, 9]
    ,[6, 4, 3, 1, 5, 8, 7, 9, 2]
    ,[5, 2, 1, 7, 9, 3, 8, 4, 6]
    ,[9, 8, 7, 4, 2, 6, 5, 3, 1]
    ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
    ,[3, 6, 5, 8, 1, 7, 9, 2, 4]
    ,[8, 7, 9, 6, 4, 2, 1, 3, 5]]
    , False,)
  )

boards.append(
  (
    [[1, 3, 2, 5, 7, 9, 4, 6, 8]
    ,[4, 9, 8, 2, 6, 0, 3, 7, 5]
    ,[7, 0, 6, 3, 8, 0, 2, 1, 9]
    ,[6, 4, 3, 1, 5, 0, 7, 9, 2]
    ,[5, 2, 1, 7, 9, 0, 8, 4, 6]
    ,[9, 8, 0, 4, 2, 0, 5, 3, 1]
    ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
    ,[3, 6, 0, 8, 1, 7, 9, 2, 4]
    ,[8, 7, 0, 6, 4, 2, 1, 3, 5]]
    , False,)
  )

boards.append(
  (
    [[1, 2, 3, 4, 5, 6, 7, 8, 9]
    ,[2, 3, 4, 5, 6, 7, 8, 9, 1]
    ,[3, 4, 5, 6, 7, 8, 9, 1, 2]
    ,[4, 5, 6, 7, 8, 9, 1, 2, 3]
    ,[5, 6, 7, 8, 9, 1, 2, 3, 4]
    ,[6, 7, 8, 9, 1, 2, 3, 4, 5]
    ,[7, 8, 9, 1, 2, 3, 4, 5, 6]
    ,[8, 9, 1, 2, 3, 4, 5, 6, 7]
    ,[9, 1, 2, 3, 4, 0, 6, 7, 8]]
    , False,)
  )

boards.append(
  (
    [[1, 3, 2, 5, 7, 9, 4, 6, 8]
    ,[4, 9, 8, 2, 6, 1, 3, 7, 5]
    ,[7, 5, 6, 3, 8, 4, 0, 1, 9]
    ,[6, 4, 3, 1, 5, 8, 7, 9, 2]
    ,[5, 2, 1, 7, 9, 3, 8, 4, 6]
    ,[9, 8, 7, 4, 2, 6, 5, 3, 1]
    ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
    ,[3, 6, 5, 8, 1, 7, 9, 2, 4]
    ,[8, 7, 9, 6, 4, 2, 1, 3, 5]]
    , False,)
  )

boards.append(
  (
    [[1, 3, 2, 5, 7, 9, 4, 6, 8]
    ,[4, 9, 8, 2, 6, 0, 3, 7, 5]
    ,[7, 0, 6, 3, 8, 0, 2, 1, 9]
    ,[6, 4, 3, 1, 5, 0, 7, 9, 2]
    ,[5, 2, 1, 7, 9, 0, 8, 4, 6]
    ,[9, 8, 0, 4, 2, 6, 5, 0, 1]
    ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
    ,[3, 6, 0, 8, 1, 7, 9, 2, 4]
    ,[8, 7, 0, 6, 4, 2, 1, 3, 5]]
    , False,)
  )

boards.append(
  (
    [[1, 2, 3, 4, 5, 6, 7, 8, 9]
    ,[2, 3, 4, 5, 6, 7, 8, 9, 1]
    ,[3, 4, 5, 6, 7, 8, 9, 1, 2]
    ,[4, 5, 6, 7, 8, 9, 1, 2, 3]
    ,[5, 6, 7, 8, 9, 1, 2, 3, 4]
    ,[6, 7, 8, 9, 1, 2, 3, 4, 5]
    ,[7, 8, 9, 1, 2, 3, 4, 5, 6]
    ,[8, 9, 1, 2, 3, 4, 5, 6, 7]
    ,[9, 1, 2, 3, 4, 5, 6, 7, 0]]
    , False,)
  )

print 'Length of boards variable: ', len(boards)
print 'Contents of boards;'
print boards

labels = 'Puzzle is: \tWerneckpavia: \tTorofoggi: \tConradical: \tLense: \t\tElcoban: \tStfin: '
results = '{}: \t\t{}: \t\t{}: \t\t{}: \t\t{}: \t\t{}: \t\t{}: '
print labels

for puzzle, solved in boards:
  wrnkpva = werneckpaiva_valid(puzzle)
  trfggi = torofoggi_valid(puzzle)
  cnrdcl = conradical_valid(puzzle)
  lnse = lense_valid(puzzle)
  lcbn = elcoban_valid(puzzle)
  stfn = stfin_valid(puzzle)
  print results.format(solved, wrnkpva, trfggi, cnrdcl, lnse, lcbn, stfn)
  #print validate_puzzle(puzzle)
  